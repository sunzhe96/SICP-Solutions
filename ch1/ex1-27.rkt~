#lang sicp

(define (even? n)
  (= (remainder n 2) 0))

(define (square n) (* n n))

(define (expmod a n m)
  (cond
    ((= n 0) 1)
    ((even? n)
     (remainder (square (expmod a (/ n 2) m)) m))
    (else
     (remainder (* a (expmod a (- n 1) m)) m))))

(define (test a n)
  (= (expmod a n n) a))

(test 2 100)
        
