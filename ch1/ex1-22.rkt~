#lang sicp

(define (smallest-divisor n)
  
  (define (find-divisor n test-divisor)
   (cond ((> (square test-divisor) n) n)
         ((= (remainder n test-divisor) 0) test-divisor)
         (else (find-divisor n (+ 1 test-divisor)))))
  
  (define (square x) (* x x))

  (find-divisor n 2))

;; (define (timed-prime-test n)
;;   (newline)
;;   (display n)
;;   (start-prime-test n (runtime)))

;; (define (start-prime-test n start-time)
;;   (if (prime? n)
;;       (report-prime (- (runtime) 
;;                        start-time))))

;; (define (report-prime elapsed-time)
;;   (display " *** ")
;;   (display elapsed-time))

(define (search-for-primes from)

  (define (even? x) (= (remainder x 2) 0))
 
  (define (search-iter start numbers-needed)
    (cond ((even? start) (+ start 1) numbers-needed)
          ((= numbers-needed 0))
          (= (smallest-divisor start) start)
    
  
  (search-iter from 3))


(search-for-primes 100)


(define (even? x) (= (remainder x 2) 0))
 
  (define (search-iter start numbers-needed a b c)
    (cond ((even? start)
           (search-iter (+ start 1) numbers-needed a b c))
          ((= numbers-needed 0)
           (display a)
           (newline)
           (display b)
           (newline)
           (display c))
          ((and (= (smallest-divisor start) start)
                (= numbers-needed 3))
           (search-iter
            (+ start 2) (- numbers-needed 1) start b c))
          ((and (= (smallest-divisor start) start)
                (= numbers-needed 2))
           (search-iter
            (+ start 2) (- numbers-needed 1) a start c))
          ((and (= (smallest-divisor start) start)
                (= numbers-needed 1))
           (search-iter
            (+ start 2) (- numbers-needed 1) a b start))
          (else (search-iter
                 (+ start 2) numbers-needed a b c))))

(search-iter 1000000000000 3 0 0 0)

(and (= 0 0) (> 1 0))
