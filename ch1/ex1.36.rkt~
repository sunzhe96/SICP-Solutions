#lang sicp

;; Exercise 1.36

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  
  (define (close-enough? v1 v2)
    (< (abs(- v1 v2))
       tolerance))
  
  (define (try guess)
    
    (define (report-guess next)
      (display " result: ")
      next)

    (display " guess ")
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          (report-guess next)
          (try next))))
  
  (try first-guess))

(define (average x y) (/ (+ x y) 2))

;; (fixed-point (lambda (x) (/ (log 1000) (log x))) 1.0)

(fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 1.0) 
